(function(){"use strict";let t,g=0,f=!1,k=!1,i=[],p=!1;const M=30;let R=null,F=null,w=[];const e=(n,r=null)=>{const a=`[${new Date().toISOString().slice(11,23)}] [Worker] ${n}`;console.log(a,r||"")};async function W(n){if(e("Initializing with WASM URL:",n),!n)throw new Error("WASM URL not provided");try{e("Attempting to import module factory...");let s,d=null;try{e("Trying provided URL:",n),s=await import(n),d=n,e("Module factory loaded successfully with provided URL")}catch{e("Primary URL failed, trying alternative paths...");const h=["/lux.js","/assets/lux.js","/lux.js","./lux.js",window.location.origin+"/lux.js","/workers/lux.js","/public/lux.js"];for(const m of h)if(m!==n)try{e("Trying alternative URL:",m),s=await import(m),d=m,e("Module factory loaded successfully with alternative URL:",m);break}catch(u){e("Alternative URL failed:",m,u.message)}if(!s){e("All import attempts failed, trying fetch + blob approach...");const m=[n,"/lux.js","/assets/lux.js","/lux.js"];for(const u of m)try{e("Fetching from:",u);const _=await fetch(u);if(_.ok){const l=await _.text(),S=new Blob([l],{type:"application/javascript"}),E=URL.createObjectURL(S);s=await import(E),URL.revokeObjectURL(E),d=u,e("Module factory loaded successfully with fetch + blob from:",u);break}}catch(_){e("Fetch attempt failed:",u,_.message)}}}if(!s)throw new Error("Could not load WASM module from any available path");const y={print:c=>e("[WASM Print]",c),printErr:c=>e("[WASM Error]",c),locateFile:c=>(e("Locating file:",c),c.endsWith(".wasm")?d.substring(0,d.lastIndexOf("/")+1)+c:c),importMemory:!0};e("Creating module instance with config..."),t=await s.default(y),e("Module instance created successfully")}catch(s){throw e("CRITICAL ERROR - Failed to initialize module:",s.message),e("Error stack:",s.stack),new Error(`Module initialization failed: ${s.message}`)}const r=Object.keys(t).filter(s=>typeof t[s]=="function");e("Module exports count:",r.length),e("First 10 exports:",r.slice(0,10));const a=["start_recording","stop_recording","get_recording_data","get_recorded_frame_count","get_recording_state","get_recording_error","is_recording","worker_add_frame"].filter(s=>!(t&&typeof t[s]=="function"));if(a.length===0)e("✓ All critical recording functions verified");else throw e(`ERROR - Missing required recording functions: [${a.join(", ")}]`),new Error(`Module recording functions missing: ${a.join(", ")}`)}function x(){if(t&&typeof t.get_recording_error=="function")try{return t.get_recording_error()}catch(n){return console.error("[Worker Helper] Failed to get C++ error:",n),"Failed to get C++ error: "+(n.message||n)}return"Module or get_recording_error not available"}async function C(){if(console.log("[Worker] === PROCESS FRAME QUEUE START ==="),console.log("[Worker] isProcessingFrames:",p),console.log("[Worker] frameQueue.length:",i.length),console.log("[Worker] recordingInProgress:",f),p||i.length===0){console.log("[Worker] Skipping frame processing - already processing or empty queue");return}p=!0;const n=5;console.log("[Worker] Starting frame processing with batch size:",n);try{for(;i.length>0;){const r=i.splice(0,n);console.log("[Worker] Processing batch of",r.length,"frames. Remaining in queue:",i.length);for(const o of r){const a=performance.now();try{if(console.log(`[Worker] === PROCESSING FRAME ${g+1} ===`),console.log(`[Worker] Frame dimensions: ${o.width}x${o.height}`),console.log("[Worker] Frame imageData type:",o.imageData.constructor.name),console.log("[Worker] Frame imageData length:",o.imageData.length),console.log("[Worker] Expected length:",o.width*o.height*4),console.log(`[Worker] Queue remaining: ${i.length}, recording: ${f}`),!t||typeof t.worker_add_frame!="function"){console.error("[Worker] CppModule or worker_add_frame not available"),console.error("[Worker] - CppModule:",!!t),console.error("[Worker] - worker_add_frame type:",typeof(t&&t.worker_add_frame));continue}if(!o.imageData||!o.width||!o.height){console.error("[Worker] Invalid frame data:",{hasImageData:!!o.imageData,width:o.width,height:o.height});continue}console.log("[Worker] Calling CppModule.worker_add_frame...");const s=t.worker_add_frame(o.imageData,o.width,o.height);console.log("[Worker] worker_add_frame returned:",s);const y=performance.now()-a;if(w.push(y),s){if(g++,console.log(`[Worker] ✓ Frame ${g} added successfully in ${y.toFixed(2)}ms`),g%10===0){const c=w.reduce((u,_)=>u+_,0)/w.length,h=(performance.now()-R)/1e3,m=g/h;console.log(`[Worker] Performance metrics:
                                Frame #${g}
                                Queue size: ${i.length}
                                Avg processing time: ${c.toFixed(2)}ms
                                Total duration: ${h.toFixed(2)}s
                                Actual FPS: ${m.toFixed(2)}
                                Target FPS: 30`),self.postMessage({type:"recordingProgress",frameCount:g,metrics:{avgProcessingTime:c,totalDuration:h,actualFps:m,queueSize:i.length}}),w=[]}}else{if(console.error(`[Worker] ✗ Failed to add frame ${g+1} - C++ function returned false`),typeof t.get_recording_error=="function"){const c=t.get_recording_error();console.error(`[Worker] C++ error: ${c}`)}if(typeof t.get_recording_state=="function"){const c=t.get_recording_state();console.error(`[Worker] Recording state: ${c}`)}if(typeof t.is_recording=="function"){const c=t.is_recording();console.error(`[Worker] C++ is_recording: ${c}`)}}}catch(s){console.error(`[Worker] ✗ Exception adding frame ${g+1}:`,s),console.error("[Worker] Frame data:",{hasImageData:!!o.imageData,imageDataLength:o.imageData?o.imageData.length:0,width:o.width,height:o.height,expectedLength:o.width*o.height*4})}}await new Promise(o=>setTimeout(o,0))}}finally{p=!1,console.log("[Worker] === PROCESS FRAME QUEUE END ==="),console.log("[Worker] Final queue size:",i.length),console.log("[Worker] Total frames processed:",g)}}self.onmessage=async n=>{const r=n.data;e("Received message:",r.type);try{switch(r.type){case"init":if(k){e("Already initialized");return}e("Initializing worker..."),await W(r.wasmUrl),k=!0,e("✓ Worker initialization complete"),self.postMessage({type:"initialized"});break;case"startRecording":if(e("=== START RECORDING REQUEST ==="),e("isInitialized:",k),e("recordingInProgress:",f),!k)throw e("ERROR: Worker not initialized"),new Error("Worker not initialized");f&&(e("Already recording, stopping first"),await b()),e("Resetting recording state for fresh start..."),g=0,i=[],p=!1,R=performance.now(),F=null,w=[],e("Recording state reset complete:",{frameCount:g,queueLength:i.length,isProcessingFrames:p}),e("Starting H.264/MP4 recording with options:",r.options),e("Original options dimensions:",r.options.width,"x",r.options.height),f=!0,e("Using adaptive canvas dimensions for recording...");let o=r.options.width,a=r.options.height;o%2!==0&&(o=o-1,e(`Adjusted width to even number: ${o}`)),a%2!==0&&(a=a-1,e(`Adjusted height to even number: ${a}`));const s=1920,d=16;if((o>s||a>s)&&e(`WARNING: Large dimensions (${o}x${a}) may cause issues on mobile devices`),o<d||a<d){e(`ERROR: Dimensions too small (${o}x${a}), minimum is ${d}x${d}`),f=!1,self.postMessage({type:"recordingStarted",success:!1,error:"Dimensions too small for H.264 encoding"});return}e(`Final recording dimensions: ${o}x${a}`),e(`Original canvas dimensions: ${r.options.width}x${r.options.height}`);const y=t.get_buf_width(),c=t.get_buf_height();e(`Buffer dimensions (for reference): ${y}x${c}`),e("Calling C++ start_recording with CANVAS dimensions:"),e("- Width:",o),e("- Height:",a),e("- FPS:",r.options.fps),e("- Bitrate:",r.options.bitrate),e("- Codec:",r.options.codec),e("- Format:",r.options.format),e("- Preset:",r.options.preset);const h=await t.start_recording(o,a,r.options.fps,r.options.bitrate,r.options.codec,r.options.format,r.options.preset);if(e("start_recording returned:",h),h){if(e("✓ Recording started successfully"),typeof t.get_recording_state=="function"){const l=t.get_recording_state();e("C++ recording state after start:",l)}if(typeof t.is_recording=="function"){const l=t.is_recording();e("C++ is_recording after start:",l)}i.length>0&&(e(`Processing ${i.length} frames that were queued while waiting for backend`),C()),self.postMessage({type:"recordingStarted",success:!0})}else{if(e("✗ Failed to start H.264 recording"),typeof t.get_recording_error=="function"){const l=t.get_recording_error();e("C++ error:",l)}f=!1,i.length>0&&(e(`Clearing ${i.length} queued frames due to recording failure`),i=[]),self.postMessage({type:"recordingStarted",success:!1,error:"Failed to start H.264 recording"})}break;case"addFrame":if(e("=== ADD FRAME REQUEST ==="),e("CppModule available:",!!t),e("worker_add_frame available:",!!(t&&t.worker_add_frame)),e("recordingInProgress:",f),!f){e("Rejecting frame - recording not in progress");return}if(!t||!t.worker_add_frame){e("Module not ready, queuing frame for when backend is ready"),e("- CppModule:",!!t),e("- worker_add_frame:",!!(t&&t.worker_add_frame)),r.imageData&&r.width&&r.height&&(i.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame queued while waiting for backend. Queue size:",i.length));return}if(e("Frame data validation:"),e("- hasImageData:",!!r.imageData),e("- width:",r.width),e("- height:",r.height),e("- imageData type:",r.imageData?r.imageData.constructor.name:"null"),e("- imageData length:",r.imageData?r.imageData.length:0),e("- expected length:",r.width*r.height*4),!r.imageData||!r.width||!r.height){e("Invalid frame data:",{hasImageData:!!r.imageData,width:r.width,height:r.height});return}if(typeof t.get_recording_state=="function"){const l=t.get_recording_state();e("Current C++ recording state:",l)}if(typeof t.is_recording=="function"){const l=t.is_recording();if(e("C++ is_recording:",l),!l){e("C++ not ready yet, queuing frame"),i.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame queued waiting for C++ ready. Queue size:",i.length);return}}e("Adding frame to queue. Current queue size:",i.length),i.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame added to queue. New queue size:",i.length),i.length>=M&&(e("Queue size reached MAX_QUEUE_SIZE, processing frames"),C());break;case"stopRecording":if(!f){e("Not recording");return}const u=(performance.now()-R)/1e3;e(`Recording stopped after ${u.toFixed(2)}s with ${g} frames`),e(`Average FPS: ${(g/u).toFixed(2)}`),f=!1,r.flushQueue?(e(`Flushing ${i.length} remaining frames from queue (will not be processed)`),i=[],e("Frame queue flushed - starting clean for next recording")):i.length>0&&(e(`Processing ${i.length} remaining frames before stopping`),await C());const _=await b();self.postMessage({..._,metrics:{totalDuration:u,totalFrames:g,averageFps:g/u}});break;case"getState":if(!t){self.postMessage({type:"recorderState",state:"module_not_ready",frameCount:0,queueSize:0});return}try{const l=typeof t.get_recording_state=="function"?t.get_recording_state():"unknown",S=typeof t.get_recorded_frame_count=="function"?t.get_recorded_frame_count():0,E=typeof t.is_recording=="function"?t.is_recording():!1;self.postMessage({type:"recorderState",state:l,frameCount:S,queueSize:0,isCppRecording:E,isWorkerRecording:f})}catch(l){e("Exception during getState:",l.message),self.postMessage({type:"recorderState",state:"error_getting_state",frameCount:0,queueSize:0})}break;default:e("Unknown message type:",r.type)}}catch(o){e("CRITICAL ERROR in message handler:",o.message),e("Error stack:",o.stack),self.postMessage({type:"error",error:o.message})}};async function b(){try{if(e("Stopping recording and finalizing..."),f=!1,p=!1,i.length>0&&(e(`Processing ${i.length} remaining frames before stopping`),await C()),t.stop_recording()){e("Recording stopped successfully, getting data");const r=t.get_recording_data();if(r&&r.length>0){e(`Got ${r.length} bytes of video data`);const o=Array.from(r.slice(0,16)).map(c=>c.toString(16).padStart(2,"0")).join(" ");if(e("First 16 bytes:",o),r.length<1e3)throw new Error("Video data too small, likely corrupted");const a=new ArrayBuffer(r.length),s=new Uint8Array(a);s.set(r);const d=t.get_recorded_frame_count()||0;e(`Final frame count: ${d}`),s[4]===102&&s[5]===116&&s[6]===121&&s[7]===112||(e("Warning: MP4 header not detected. Expected ftyp box (66 74 79 70)"),e("Got:",o)),e("Cleaning up state for next recording..."),i=[],p=!1,g=0,R=null,F=null,w=[],e("State cleanup complete:",{frameQueue:i.length,isProcessingFrames:p,frameCount:g}),self.postMessage({type:"recordingStopped",success:!0,videoData:s,frameCount:d,mimeType:'video/mp4; codecs="avc1.42E01E"',duration:d/30},[a])}else e("No video data returned"),self.postMessage({type:"recordingStopped",success:!1,error:"No video data available"})}else{const r=x();e("stop_recording failed:",r),self.postMessage({type:"recordingStopped",success:!1,error:`Stop recording failed: ${r}`})}}catch(n){e("Exception during stopRecording:",n),self.postMessage({type:"recordingStopped",success:!1,error:"Exception: "+(n.message||n.toString())})}finally{e("Final cleanup - ensuring clean state..."),f=!1,p=!1,i=[],g=0,R=null,F=null,w=[],e("Final cleanup complete - ready for next recording")}}self.addEventListener("error",n=>{if(e("CRITICAL ERROR in global error handler:",n.message,n.filename,n.lineno),self.postMessage)try{self.postMessage({type:"error",error:"Worker error: "+n.message})}catch{e("CRITICAL ERROR: Could not send error message")}}),self.addEventListener("unhandledrejection",n=>{if(e("CRITICAL ERROR in global error handler:",n.reason),self.postMessage)try{self.postMessage({type:"error",error:"Worker promise rejection: "+(n.reason.message||n.reason.toString())})}catch{e("CRITICAL ERROR: Could not send rejection message")}}),e("H.264/MP4 video encoding worker initialized")})();
