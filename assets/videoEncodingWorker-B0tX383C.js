(function(){"use strict";let t,d=0,u=!1,k=!1,n=[],m=!1;const S=30;let w=null,C=null,h=[];const e=(a,r=null)=>{const i=`[${new Date().toISOString().slice(11,23)}] [Worker] ${a}`;console.log(i,r||"")};function W(){return new Promise((a,r)=>{let i=0;const c=setInterval(()=>{i++,e(`Checking main thread WASM readiness... attempt ${i}/50`),self.postMessage({type:"checkMainThreadReady"}),i>=50&&(clearInterval(c),r(new Error("Main thread WASM not ready after 5 seconds")))},100),g=l=>{l.data.type==="mainThreadReady"&&(clearInterval(c),self.removeEventListener("message",g),l.data.ready?(e("✓ Main thread WASM is ready"),a()):r(new Error("Main thread WASM is not ready")))};self.addEventListener("message",g)})}async function $(){e("Worker initialization - using main thread WASM instance...");try{return await W(),e("Requesting WASM module from main thread..."),new Promise((i,c)=>{const g=l=>{l.data.type==="wasmModuleResponse"&&(self.removeEventListener("message",g),l.data.success?(t=l.data.module,e("✓ Received WASM module from main thread"),i()):c(new Error(l.data.error||"Failed to get WASM module from main thread")))};self.addEventListener("message",g),self.postMessage({type:"getWasmModule"}),setTimeout(()=>{self.removeEventListener("message",g),c(new Error("Timeout waiting for WASM module from main thread"))},1e4)})}catch(i){throw e("CRITICAL ERROR - Failed to initialize module:",i.message),e("Error stack:",i.stack),new Error(`Module initialization failed: ${i.message}`)}const a=Object.keys(t).filter(i=>typeof t[i]=="function");e("Module exports count:",a.length),e("First 10 exports:",a.slice(0,10));const r=["start_recording","stop_recording","get_recording_data","get_recorded_frame_count","get_recording_state","get_recording_error","is_recording","worker_add_frame"];e("Checking each required function:"),r.forEach(i=>{const c=t&&typeof t[i]=="function";e(`- ${i}: ${c?"✓":"✗"} (${typeof t[i]})`)});const o=r.filter(i=>!(t&&typeof t[i]=="function"));if(o.length===0){e("✓ All critical recording functions verified");try{if(typeof t.get_recording_state=="function"){const s=t.get_recording_state();e("Initial recording state:",s)}e("Searching for initialization functions...");const c=Object.keys(t).filter(s=>typeof t[s]=="function").filter(s=>s.toLowerCase().includes("init")||s.toLowerCase().includes("setup")||s.toLowerCase().includes("recorder")||s.toLowerCase().includes("video"));e("All functions that might be related to initialization:",c);const g=["init_video_recorder","initialize_recorder","init_recorder","recorder_init","video_init","init_video","setup_recorder","setup_video_recorder","video_recorder_init","recorder_initialize","initialize_video_recorder","initialize_video","recorder_setup","video_setup",...c];let l=!1;for(const s of g)if(typeof t[s]=="function")try{e(`Found initialization function: ${s}, calling it...`);const p=t[s]();e(`${s} returned:`,p),l=!0;break}catch(p){e(`Warning: ${s} failed:`,p.message)}if(!l&&(e("No video recorder initialization function found, trying automatic init..."),typeof t.get_recording_state=="function")){const s=t.get_recording_state();e("Recording state after init attempt:",s)}}catch(i){e("Warning: Could not initialize video recorder:",i.message)}}else throw e(`ERROR - Missing required recording functions: [${o.join(", ")}]`),new Error(`Module recording functions missing: ${o.join(", ")}`)}function v(){if(t&&typeof t.get_recording_error=="function")try{return t.get_recording_error()}catch(a){return console.error("[Worker Helper] Failed to get C++ error:",a),"Failed to get C++ error: "+(a.message||a)}return"Module or get_recording_error not available"}async function R(){if(console.log("[Worker] === PROCESS FRAME QUEUE START ==="),console.log("[Worker] isProcessingFrames:",m),console.log("[Worker] frameQueue.length:",n.length),console.log("[Worker] recordingInProgress:",u),m||n.length===0){console.log("[Worker] Skipping frame processing - already processing or empty queue");return}m=!0;const a=5;console.log("[Worker] Starting frame processing with batch size:",a);try{for(;n.length>0;){const r=n.splice(0,a);console.log("[Worker] Processing batch of",r.length,"frames. Remaining in queue:",n.length);for(const o of r){const i=performance.now();try{if(console.log(`[Worker] === PROCESSING FRAME ${d+1} ===`),console.log(`[Worker] Frame dimensions: ${o.width}x${o.height}`),console.log("[Worker] Frame imageData type:",o.imageData.constructor.name),console.log("[Worker] Frame imageData length:",o.imageData.length),console.log("[Worker] Expected length:",o.width*o.height*4),console.log(`[Worker] Queue remaining: ${n.length}, recording: ${u}`),!t||typeof t.worker_add_frame!="function"){console.error("[Worker] CppModule or worker_add_frame not available"),console.error("[Worker] - CppModule:",!!t),console.error("[Worker] - worker_add_frame type:",typeof(t&&t.worker_add_frame));continue}if(!o.imageData||!o.width||!o.height){console.error("[Worker] Invalid frame data:",{hasImageData:!!o.imageData,width:o.width,height:o.height});continue}console.log("[Worker] Calling CppModule.worker_add_frame...");const c=t.worker_add_frame(o.imageData,o.width,o.height);console.log("[Worker] worker_add_frame returned:",c);const l=performance.now()-i;if(h.push(l),c){if(d++,console.log(`[Worker] ✓ Frame ${d} added successfully in ${l.toFixed(2)}ms`),d%10===0){const s=h.reduce((y,F)=>y+F,0)/h.length,p=(performance.now()-w)/1e3,E=d/p;console.log(`[Worker] Performance metrics:
                                Frame #${d}
                                Queue size: ${n.length}
                                Avg processing time: ${s.toFixed(2)}ms
                                Total duration: ${p.toFixed(2)}s
                                Actual FPS: ${E.toFixed(2)}
                                Target FPS: 30`),self.postMessage({type:"recordingProgress",frameCount:d,metrics:{avgProcessingTime:s,totalDuration:p,actualFps:E,queueSize:n.length}}),h=[]}}else{if(console.error(`[Worker] ✗ Failed to add frame ${d+1} - C++ function returned false`),typeof t.get_recording_error=="function"){const s=t.get_recording_error();console.error(`[Worker] C++ error: ${s}`)}if(typeof t.get_recording_state=="function"){const s=t.get_recording_state();console.error(`[Worker] Recording state: ${s}`)}if(typeof t.is_recording=="function"){const s=t.is_recording();console.error(`[Worker] C++ is_recording: ${s}`)}}}catch(c){console.error(`[Worker] ✗ Exception adding frame ${d+1}:`,c),console.error("[Worker] Frame data:",{hasImageData:!!o.imageData,imageDataLength:o.imageData?o.imageData.length:0,width:o.width,height:o.height,expectedLength:o.width*o.height*4})}}await new Promise(o=>setTimeout(o,0))}}finally{m=!1,console.log("[Worker] === PROCESS FRAME QUEUE END ==="),console.log("[Worker] Final queue size:",n.length),console.log("[Worker] Total frames processed:",d)}}self.onmessage=async a=>{const r=a.data;e("Received message:",r.type);try{switch(r.type){case"init":if(k){e("Already initialized");return}e("Initializing worker..."),await $(),k=!0,e("✓ Worker initialization complete"),self.postMessage({type:"initialized"});break;case"startRecording":if(e("=== START RECORDING REQUEST ==="),e("isInitialized:",k),e("recordingInProgress:",u),!k)throw e("ERROR: Worker not initialized"),new Error("Worker not initialized");u&&(e("Already recording, stopping first"),await M()),e("Resetting recording state for fresh start..."),d=0,n=[],m=!1,w=performance.now(),C=null,h=[],e("Recording state reset complete:",{frameCount:d,queueLength:n.length,isProcessingFrames:m}),e("Starting H.264/MP4 recording with options:",r.options),e("Original options dimensions:",r.options.width,"x",r.options.height),u=!0,e("Using adaptive canvas dimensions for recording...");let o=r.options.width,i=r.options.height;o%2!==0&&(o=o-1,e(`Adjusted width to even number: ${o}`)),i%2!==0&&(i=i-1,e(`Adjusted height to even number: ${i}`));const c=1920,g=16;if((o>c||i>c)&&e(`WARNING: Large dimensions (${o}x${i}) may cause issues on mobile devices`),o<g||i<g){e(`ERROR: Dimensions too small (${o}x${i}), minimum is ${g}x${g}`),u=!1,self.postMessage({type:"recordingStarted",success:!1,error:"Dimensions too small for H.264 encoding"});return}e(`Final recording dimensions: ${o}x${i}`),e(`Original canvas dimensions: ${r.options.width}x${r.options.height}`);const l=t.get_buf_width(),s=t.get_buf_height();e(`Buffer dimensions (for reference): ${l}x${s}`),e("Calling C++ start_recording with CANVAS dimensions:"),e("- Width:",o),e("- Height:",i),e("- FPS:",r.options.fps),e("- Bitrate:",r.options.bitrate),e("- Codec:",r.options.codec),e("- Format:",r.options.format),e("- Preset:",r.options.preset);const p=await t.start_recording(o,i,r.options.fps,r.options.bitrate,r.options.codec,r.options.format,r.options.preset);if(e("start_recording returned:",p),p){if(e("✓ Recording started successfully"),typeof t.get_recording_state=="function"){const f=t.get_recording_state();e("C++ recording state after start:",f)}if(typeof t.is_recording=="function"){const f=t.is_recording();e("C++ is_recording after start:",f)}n.length>0&&(e(`Processing ${n.length} frames that were queued while waiting for backend`),R()),self.postMessage({type:"recordingStarted",success:!0})}else{e("✗ Failed to start H.264 recording");let f="Unknown error";if(typeof t.get_recording_error=="function")try{f=t.get_recording_error(),e("C++ error details:",f)}catch(_){e("Failed to get C++ error:",_.message)}if(e("Checking recording function availability:"),e("- start_recording:",typeof t.start_recording),e("- stop_recording:",typeof t.stop_recording),e("- get_recording_data:",typeof t.get_recording_data),e("- get_recording_error:",typeof t.get_recording_error),typeof t.get_recording_state=="function")try{const _=t.get_recording_state();e("Current recording state:",_)}catch(_){e("Failed to get recording state:",_.message)}u=!1,n.length>0&&(e(`Clearing ${n.length} queued frames due to recording failure`),n=[]),self.postMessage({type:"recordingStarted",success:!1,error:`Failed to start H.264 recording: ${f}`})}break;case"addFrame":if(e("=== ADD FRAME REQUEST ==="),e("CppModule available:",!!t),e("worker_add_frame available:",!!(t&&t.worker_add_frame)),e("recordingInProgress:",u),!u){e("Rejecting frame - recording not in progress");return}if(!t||!t.worker_add_frame){e("Module not ready, queuing frame for when backend is ready"),e("- CppModule:",!!t),e("- worker_add_frame:",!!(t&&t.worker_add_frame)),r.imageData&&r.width&&r.height&&(n.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame queued while waiting for backend. Queue size:",n.length));return}if(e("Frame data validation:"),e("- hasImageData:",!!r.imageData),e("- width:",r.width),e("- height:",r.height),e("- imageData type:",r.imageData?r.imageData.constructor.name:"null"),e("- imageData length:",r.imageData?r.imageData.length:0),e("- expected length:",r.width*r.height*4),!r.imageData||!r.width||!r.height){e("Invalid frame data:",{hasImageData:!!r.imageData,width:r.width,height:r.height});return}if(typeof t.get_recording_state=="function"){const f=t.get_recording_state();e("Current C++ recording state:",f)}if(typeof t.is_recording=="function"){const f=t.is_recording();if(e("C++ is_recording:",f),!f){e("C++ not ready yet, queuing frame"),n.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame queued waiting for C++ ready. Queue size:",n.length);return}}e("Adding frame to queue. Current queue size:",n.length),n.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame added to queue. New queue size:",n.length),n.length>=S&&(e("Queue size reached MAX_QUEUE_SIZE, processing frames"),R());break;case"stopRecording":if(!u){e("Not recording");return}const y=(performance.now()-w)/1e3;e(`Recording stopped after ${y.toFixed(2)}s with ${d} frames`),e(`Average FPS: ${(d/y).toFixed(2)}`),u=!1,r.flushQueue?(e(`Flushing ${n.length} remaining frames from queue (will not be processed)`),n=[],e("Frame queue flushed - starting clean for next recording")):n.length>0&&(e(`Processing ${n.length} remaining frames before stopping`),await R());const F=await M();self.postMessage({...F,metrics:{totalDuration:y,totalFrames:d,averageFps:d/y}});break;case"getState":if(!t){self.postMessage({type:"recorderState",state:"module_not_ready",frameCount:0,queueSize:0});return}try{const f=typeof t.get_recording_state=="function"?t.get_recording_state():"unknown",_=typeof t.get_recorded_frame_count=="function"?t.get_recorded_frame_count():0,D=typeof t.is_recording=="function"?t.is_recording():!1;self.postMessage({type:"recorderState",state:f,frameCount:_,queueSize:0,isCppRecording:D,isWorkerRecording:u})}catch(f){e("Exception during getState:",f.message),self.postMessage({type:"recorderState",state:"error_getting_state",frameCount:0,queueSize:0})}break;default:e("Unknown message type:",r.type)}}catch(o){e("CRITICAL ERROR in message handler:",o.message),e("Error stack:",o.stack),self.postMessage({type:"error",error:o.message})}};async function M(){try{if(e("Stopping recording and finalizing..."),u=!1,m=!1,n.length>0&&(e(`Processing ${n.length} remaining frames before stopping`),await R()),t.stop_recording()){e("Recording stopped successfully, getting data");const r=t.get_recording_data();if(r&&r.length>0){e(`Got ${r.length} bytes of video data`);const o=Array.from(r.slice(0,16)).map(s=>s.toString(16).padStart(2,"0")).join(" ");if(e("First 16 bytes:",o),r.length<1e3)throw new Error("Video data too small, likely corrupted");const i=new ArrayBuffer(r.length),c=new Uint8Array(i);c.set(r);const g=t.get_recorded_frame_count()||0;e(`Final frame count: ${g}`),c[4]===102&&c[5]===116&&c[6]===121&&c[7]===112||(e("Warning: MP4 header not detected. Expected ftyp box (66 74 79 70)"),e("Got:",o)),e("Cleaning up state for next recording..."),n=[],m=!1,d=0,w=null,C=null,h=[],e("State cleanup complete:",{frameQueue:n.length,isProcessingFrames:m,frameCount:d}),self.postMessage({type:"recordingStopped",success:!0,videoData:c,frameCount:g,mimeType:'video/mp4; codecs="avc1.42E01E"',duration:g/30},[i])}else e("No video data returned"),self.postMessage({type:"recordingStopped",success:!1,error:"No video data available"})}else{const r=v();e("stop_recording failed:",r),self.postMessage({type:"recordingStopped",success:!1,error:`Stop recording failed: ${r}`})}}catch(a){e("Exception during stopRecording:",a),self.postMessage({type:"recordingStopped",success:!1,error:"Exception: "+(a.message||a.toString())})}finally{e("Final cleanup - ensuring clean state..."),u=!1,m=!1,n=[],d=0,w=null,C=null,h=[],e("Final cleanup complete - ready for next recording")}}self.addEventListener("error",a=>{if(e("CRITICAL ERROR in global error handler:",a.message,a.filename,a.lineno),self.postMessage)try{self.postMessage({type:"error",error:"Worker error: "+a.message})}catch{e("CRITICAL ERROR: Could not send error message")}}),self.addEventListener("unhandledrejection",a=>{if(e("CRITICAL ERROR in global error handler:",a.reason),self.postMessage)try{self.postMessage({type:"error",error:"Worker promise rejection: "+(a.reason.message||a.reason.toString())})}catch{e("CRITICAL ERROR: Could not send rejection message")}}),e("H.264/MP4 video encoding worker initialized - v1.1 with enhanced init detection")})();
