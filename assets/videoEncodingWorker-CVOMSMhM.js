(function(){"use strict";let t,a=0,d=!1,y=!1,i=[],m=!1;const S=30;let w=null,R=null,p=[];const e=(s,r=null)=>{const n=`[${new Date().toISOString().slice(11,23)}] [Worker] ${s}`;console.log(n,r||"")};async function $(){e("Initializing WASM module...");try{let n;const g=["/lux.js","/assets/lux.js","./lux.js"];for(const l of g)try{e(`Trying to load module from: ${l}`);const c=await import(l);n=c.default||c,e(`✓ Successfully loaded module from: ${l}`);break}catch(c){e(`✗ Failed to load from ${l}: ${c.message}`)}if(!n)throw new Error("Could not load lux.js from any of the attempted paths");const u={print:l=>e("[WASM Print]",l),printErr:l=>e("[WASM Error]",l),importMemory:!0};e("Creating module instance with config..."),t=await n(u),e("Module instance created successfully")}catch(n){throw e("CRITICAL ERROR - Failed to initialize module:",n.message),e("Error stack:",n.stack),new Error(`Module initialization failed: ${n.message}`)}const s=Object.keys(t).filter(n=>typeof t[n]=="function");e("Module exports count:",s.length),e("First 10 exports:",s.slice(0,10));const o=["start_recording","stop_recording","get_recording_data","get_recorded_frame_count","get_recording_state","get_recording_error","is_recording","worker_add_frame"].filter(n=>!(t&&typeof t[n]=="function"));if(o.length===0)e("✓ All critical recording functions verified");else throw e(`ERROR - Missing required recording functions: [${o.join(", ")}]`),new Error(`Module recording functions missing: ${o.join(", ")}`)}function M(){if(t&&typeof t.get_recording_error=="function")try{return t.get_recording_error()}catch(s){return console.error("[Worker Helper] Failed to get C++ error:",s),"Failed to get C++ error: "+(s.message||s)}return"Module or get_recording_error not available"}async function k(){if(console.log("[Worker] === PROCESS FRAME QUEUE START ==="),console.log("[Worker] isProcessingFrames:",m),console.log("[Worker] frameQueue.length:",i.length),console.log("[Worker] recordingInProgress:",d),m||i.length===0){console.log("[Worker] Skipping frame processing - already processing or empty queue");return}m=!0;const s=5;console.log("[Worker] Starting frame processing with batch size:",s);try{for(;i.length>0;){const r=i.splice(0,s);console.log("[Worker] Processing batch of",r.length,"frames. Remaining in queue:",i.length);for(const o of r){const n=performance.now();try{if(console.log(`[Worker] === PROCESSING FRAME ${a+1} ===`),console.log(`[Worker] Frame dimensions: ${o.width}x${o.height}`),console.log("[Worker] Frame imageData type:",o.imageData.constructor.name),console.log("[Worker] Frame imageData length:",o.imageData.length),console.log("[Worker] Expected length:",o.width*o.height*4),console.log(`[Worker] Queue remaining: ${i.length}, recording: ${d}`),!t||typeof t.worker_add_frame!="function"){console.error("[Worker] CppModule or worker_add_frame not available"),console.error("[Worker] - CppModule:",!!t),console.error("[Worker] - worker_add_frame type:",typeof(t&&t.worker_add_frame));continue}if(!o.imageData||!o.width||!o.height){console.error("[Worker] Invalid frame data:",{hasImageData:!!o.imageData,width:o.width,height:o.height});continue}console.log("[Worker] Calling CppModule.worker_add_frame...");const g=t.worker_add_frame(o.imageData,o.width,o.height);console.log("[Worker] worker_add_frame returned:",g);const l=performance.now()-n;if(p.push(l),g){if(a++,console.log(`[Worker] ✓ Frame ${a} added successfully in ${l.toFixed(2)}ms`),a%10===0){const c=p.reduce((_,E)=>_+E,0)/p.length,h=(performance.now()-w)/1e3,C=a/h;console.log(`[Worker] Performance metrics:
                                Frame #${a}
                                Queue size: ${i.length}
                                Avg processing time: ${c.toFixed(2)}ms
                                Total duration: ${h.toFixed(2)}s
                                Actual FPS: ${C.toFixed(2)}
                                Target FPS: 30`),self.postMessage({type:"recordingProgress",frameCount:a,metrics:{avgProcessingTime:c,totalDuration:h,actualFps:C,queueSize:i.length}}),p=[]}}else{if(console.error(`[Worker] ✗ Failed to add frame ${a+1} - C++ function returned false`),typeof t.get_recording_error=="function"){const c=t.get_recording_error();console.error(`[Worker] C++ error: ${c}`)}if(typeof t.get_recording_state=="function"){const c=t.get_recording_state();console.error(`[Worker] Recording state: ${c}`)}if(typeof t.is_recording=="function"){const c=t.is_recording();console.error(`[Worker] C++ is_recording: ${c}`)}}}catch(g){console.error(`[Worker] ✗ Exception adding frame ${a+1}:`,g),console.error("[Worker] Frame data:",{hasImageData:!!o.imageData,imageDataLength:o.imageData?o.imageData.length:0,width:o.width,height:o.height,expectedLength:o.width*o.height*4})}}await new Promise(o=>setTimeout(o,0))}}finally{m=!1,console.log("[Worker] === PROCESS FRAME QUEUE END ==="),console.log("[Worker] Final queue size:",i.length),console.log("[Worker] Total frames processed:",a)}}self.onmessage=async s=>{const r=s.data;e("Received message:",r.type);try{switch(r.type){case"init":if(y){e("Already initialized");return}e("Initializing worker..."),await $(),y=!0,e("✓ Worker initialization complete"),self.postMessage({type:"initialized"});break;case"startRecording":if(e("=== START RECORDING REQUEST ==="),e("isInitialized:",y),e("recordingInProgress:",d),!y)throw e("ERROR: Worker not initialized"),new Error("Worker not initialized");d&&(e("Already recording, stopping first"),await F()),e("Resetting recording state for fresh start..."),a=0,i=[],m=!1,w=performance.now(),R=null,p=[],e("Recording state reset complete:",{frameCount:a,queueLength:i.length,isProcessingFrames:m}),e("Starting H.264/MP4 recording with options:",r.options),e("Original options dimensions:",r.options.width,"x",r.options.height),d=!0,e("Using adaptive canvas dimensions for recording...");let o=r.options.width,n=r.options.height;o%2!==0&&(o=o-1,e(`Adjusted width to even number: ${o}`)),n%2!==0&&(n=n-1,e(`Adjusted height to even number: ${n}`));const g=1920,u=16;if((o>g||n>g)&&e(`WARNING: Large dimensions (${o}x${n}) may cause issues on mobile devices`),o<u||n<u){e(`ERROR: Dimensions too small (${o}x${n}), minimum is ${u}x${u}`),d=!1,self.postMessage({type:"recordingStarted",success:!1,error:"Dimensions too small for H.264 encoding"});return}e(`Final recording dimensions: ${o}x${n}`),e(`Original canvas dimensions: ${r.options.width}x${r.options.height}`);const l=t.get_buf_width(),c=t.get_buf_height();e(`Buffer dimensions (for reference): ${l}x${c}`),e("Calling C++ start_recording with CANVAS dimensions:"),e("- Width:",o),e("- Height:",n),e("- FPS:",r.options.fps),e("- Bitrate:",r.options.bitrate),e("- Codec:",r.options.codec),e("- Format:",r.options.format),e("- Preset:",r.options.preset);const h=await t.start_recording(o,n,r.options.fps,r.options.bitrate,r.options.codec,r.options.format,r.options.preset);if(e("start_recording returned:",h),h){if(e("✓ Recording started successfully"),typeof t.get_recording_state=="function"){const f=t.get_recording_state();e("C++ recording state after start:",f)}if(typeof t.is_recording=="function"){const f=t.is_recording();e("C++ is_recording after start:",f)}i.length>0&&(e(`Processing ${i.length} frames that were queued while waiting for backend`),k()),self.postMessage({type:"recordingStarted",success:!0})}else{if(e("✗ Failed to start H.264 recording"),typeof t.get_recording_error=="function"){const f=t.get_recording_error();e("C++ error:",f)}d=!1,i.length>0&&(e(`Clearing ${i.length} queued frames due to recording failure`),i=[]),self.postMessage({type:"recordingStarted",success:!1,error:"Failed to start H.264 recording"})}break;case"addFrame":if(e("=== ADD FRAME REQUEST ==="),e("CppModule available:",!!t),e("worker_add_frame available:",!!(t&&t.worker_add_frame)),e("recordingInProgress:",d),!d){e("Rejecting frame - recording not in progress");return}if(!t||!t.worker_add_frame){e("Module not ready, queuing frame for when backend is ready"),e("- CppModule:",!!t),e("- worker_add_frame:",!!(t&&t.worker_add_frame)),r.imageData&&r.width&&r.height&&(i.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame queued while waiting for backend. Queue size:",i.length));return}if(e("Frame data validation:"),e("- hasImageData:",!!r.imageData),e("- width:",r.width),e("- height:",r.height),e("- imageData type:",r.imageData?r.imageData.constructor.name:"null"),e("- imageData length:",r.imageData?r.imageData.length:0),e("- expected length:",r.width*r.height*4),!r.imageData||!r.width||!r.height){e("Invalid frame data:",{hasImageData:!!r.imageData,width:r.width,height:r.height});return}if(typeof t.get_recording_state=="function"){const f=t.get_recording_state();e("Current C++ recording state:",f)}if(typeof t.is_recording=="function"){const f=t.is_recording();if(e("C++ is_recording:",f),!f){e("C++ not ready yet, queuing frame"),i.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame queued waiting for C++ ready. Queue size:",i.length);return}}e("Adding frame to queue. Current queue size:",i.length),i.push({imageData:r.imageData,width:r.width,height:r.height}),e("Frame added to queue. New queue size:",i.length),i.length>=S&&(e("Queue size reached MAX_QUEUE_SIZE, processing frames"),k());break;case"stopRecording":if(!d){e("Not recording");return}const _=(performance.now()-w)/1e3;e(`Recording stopped after ${_.toFixed(2)}s with ${a} frames`),e(`Average FPS: ${(a/_).toFixed(2)}`),d=!1,r.flushQueue?(e(`Flushing ${i.length} remaining frames from queue (will not be processed)`),i=[],e("Frame queue flushed - starting clean for next recording")):i.length>0&&(e(`Processing ${i.length} remaining frames before stopping`),await k());const E=await F();self.postMessage({...E,metrics:{totalDuration:_,totalFrames:a,averageFps:a/_}});break;case"getState":if(!t){self.postMessage({type:"recorderState",state:"module_not_ready",frameCount:0,queueSize:0});return}try{const f=typeof t.get_recording_state=="function"?t.get_recording_state():"unknown",D=typeof t.get_recorded_frame_count=="function"?t.get_recorded_frame_count():0,W=typeof t.is_recording=="function"?t.is_recording():!1;self.postMessage({type:"recorderState",state:f,frameCount:D,queueSize:0,isCppRecording:W,isWorkerRecording:d})}catch(f){e("Exception during getState:",f.message),self.postMessage({type:"recorderState",state:"error_getting_state",frameCount:0,queueSize:0})}break;default:e("Unknown message type:",r.type)}}catch(o){e("CRITICAL ERROR in message handler:",o.message),e("Error stack:",o.stack),self.postMessage({type:"error",error:o.message})}};async function F(){try{if(e("Stopping recording and finalizing..."),d=!1,m=!1,i.length>0&&(e(`Processing ${i.length} remaining frames before stopping`),await k()),t.stop_recording()){e("Recording stopped successfully, getting data");const r=t.get_recording_data();if(r&&r.length>0){e(`Got ${r.length} bytes of video data`);const o=Array.from(r.slice(0,16)).map(c=>c.toString(16).padStart(2,"0")).join(" ");if(e("First 16 bytes:",o),r.length<1e3)throw new Error("Video data too small, likely corrupted");const n=new ArrayBuffer(r.length),g=new Uint8Array(n);g.set(r);const u=t.get_recorded_frame_count()||0;e(`Final frame count: ${u}`),g[4]===102&&g[5]===116&&g[6]===121&&g[7]===112||(e("Warning: MP4 header not detected. Expected ftyp box (66 74 79 70)"),e("Got:",o)),e("Cleaning up state for next recording..."),i=[],m=!1,a=0,w=null,R=null,p=[],e("State cleanup complete:",{frameQueue:i.length,isProcessingFrames:m,frameCount:a}),self.postMessage({type:"recordingStopped",success:!0,videoData:g,frameCount:u,mimeType:'video/mp4; codecs="avc1.42E01E"',duration:u/30},[n])}else e("No video data returned"),self.postMessage({type:"recordingStopped",success:!1,error:"No video data available"})}else{const r=M();e("stop_recording failed:",r),self.postMessage({type:"recordingStopped",success:!1,error:`Stop recording failed: ${r}`})}}catch(s){e("Exception during stopRecording:",s),self.postMessage({type:"recordingStopped",success:!1,error:"Exception: "+(s.message||s.toString())})}finally{e("Final cleanup - ensuring clean state..."),d=!1,m=!1,i=[],a=0,w=null,R=null,p=[],e("Final cleanup complete - ready for next recording")}}self.addEventListener("error",s=>{if(e("CRITICAL ERROR in global error handler:",s.message,s.filename,s.lineno),self.postMessage)try{self.postMessage({type:"error",error:"Worker error: "+s.message})}catch{e("CRITICAL ERROR: Could not send error message")}}),self.addEventListener("unhandledrejection",s=>{if(e("CRITICAL ERROR in global error handler:",s.reason),self.postMessage)try{self.postMessage({type:"error",error:"Worker promise rejection: "+(s.reason.message||s.reason.toString())})}catch{e("CRITICAL ERROR: Could not send rejection message")}}),e("H.264/MP4 video encoding worker initialized")})();
